'use strict';
// операторы в JS -----------------------------------------------------------------------------------------------------------------------------------------

// операторы "-", "/", "*" - работают, как обычно и в их спользовании нет каких-то особенностей

// а вот плюс "+" - стоить особняком:

// вот конкатенация двух строк:
console.log('str' + " - object"); // тут всё очень понятно и предсказуемый результат "str - object" - строка

// теперь попробуем заменить "str" на число
console.log(7 + " - object"); // также получим строку "7 - object"

// теперь попробуем приветси строку к числу, поставив перед ней унарный плюс
console.log(7 + +" - object"); // в результате получим NaN - not a number - потому что мы выполняем действие, которое не подлежит математической логике

// сделаем тоже самое, но вместо текста в строковом операнде поставим число (в кавычках, в виде строки)
console.log(7 + +"5"); // результат "12" - унарный плюс привёл пятёрку к числовому типу данных и выражение было вычислено математически (конкатенации не было)




// ИНКРЕМЕНТЫ / ДЕКРИМЕНТЫ ---------------------------------------------------------------------------------------------------------------------------------
let incr = 10,
    decr = 10;

incr++; // "++" - двойной плюс называется оператором инкремента, увеличивает значение на единицу 
decr--; // "--" - двойной минус называется оператором декремента, уменьшает значение на единицу 

// посмотрим что стало с переменными
console.log(incr, decr); // результат ожидаемый "11 9"

// хочется разобраться - для чего нужна префиксная и постфиксная запись операторов инкремента и декремента?
// попробуем переписать так:
incr = 10,
decr = 10;

++incr;
--decr;

console.log(incr, decr); // ничего не изменилось - "11 9", потому что результат работы этих операторов к момету вывода уже понятен

// но, если попробовать сделать вычисление и сразу же вывести результат, то всё будет понятнее:

incr = 10,
decr = 10;

console.log(incr++, decr--);
// результат "10 10" - при постфиксном написании этих операторов сначала возращается старое значение переменной и только потом происходит изменение на еденицу


incr = 10,
decr = 10;

console.log(++incr, --decr);
// а вот здесь результат уже "11 9", т.к. при префиксном написании сначала происходит изменение на единицу, а потом возвращение результата

// пока не понятно как это применяется на практике, но в циклах такие операторы применяются часто - там ещё поизучаем эти операторы.




// ОСТАТОК ОТ ДЕЛЕНИЯ %
console.log(5%2); // 1

// ОПЕРАТОР РАВЕНСТВА
// "=" одинарный знак равенства - присваивание
let num = 7;
// "==" двойной оператр равенства - сравнение
console.log(4 * 2 == 8); // true
console.log(4 * 2 == '8'); // true - произошло приведение оператора справа к числу
// чтобы применить строгое сравнение с учётом типа данных, нужно использовать тройной оператор равенства "==="
console.log(4 * 2 === '8'); // false
console.log(4 * 2 === 8); // true



// ЛОГИЧЕСКИЕ ОПЕРАТОРЫ: && - и, || - или, ! - отрицание.

// есть ещё побитовые - но их пока не рассматриваем

// есть ещё оператор сравнения ? - тоже пока не изучаем.
